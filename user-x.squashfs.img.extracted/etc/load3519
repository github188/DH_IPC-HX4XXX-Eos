#!/bin/sh
# Useage: ./load3519 [ -r|-i|-a ] [ sensor ]
#         -r : rmmod all modules
#         -i : insmod all modules
#    default : rmmod all moules and then insmod them
#


# mn34220 imx290 imx226

####################Variables Definition##########################

SNS_TYPE=mn34220            # sensor type

mem_total=512;              # 512M, total mem
mem_start=0x80000000;       # phy mem start
os_mem_size=64;             # 64M, os mem
mmz_start=0x84000000;       # mmz start addr
mmz_size=128M;              # 128M, mmz size

##################################################################

report_error()
{
	echo "******* Error: There's something wrong, please check! *****"
	exit 1
}

insert_audio()
{
	insmod acodec.ko
	insmod hi3519_aio.ko
	insmod hi3519_ai.ko
	insmod hi3519_ao.ko
	insmod hi3519_aenc.ko
	insmod hi3519_adec.ko
	#insmod extdrv/tlv_320aic31.ko 
	echo "insert audio"
}

remove_audio()
{
	rmmod tlv_320aic31.ko
	rmmod hi3519_adec
	rmmod hi3519_aenc
	rmmod hi3519_ao
	rmmod hi3519_ai
	rmmod hi3519_aio
	rmmod acodec
	echo "remove audio"
}

insert_sns()
{
    case $SNS_TYPE in
        imx226)
            himm 0x12040008 0x1;    #slave mode SENSOR0_HS
            himm 0x1204000C 0x1;    #slave mode SENSOR0_VS
            ;;
        imx290)
            himm 0x1204007c 0x2;    #I2C0_SCL
            himm 0x12040080 0x2;    #I2C0_SDA
            himm 0x12010040 0x18;   #sensor clk 37.125M
            ;;
        imx317)
            himm 0x1204007c 0x1;    #SPI0_SCL
            himm 0x12040080 0x1;    #SPI0_SDO
            himm 0x12040084 0x1;    #SPI0_SDI
            himm 0x12040088 0x1;    #SPI0_CSN
            himm 0x12010040 0x11;   #sensor clk 72M
            insmod extdrv/sensor_spi.ko sensor=imx117;
            ;;
        mn34220)
            himm 0x1204007c 0x2;    #I2C0_SCL
            himm 0x12040080 0x2;    #I2C0_SDA
            himm 0x12010040 0x18;   #sensor clk 37.125M
            ;;
        mn34120)
            himm 0x1204007c 0x3;    #SPI0_3wire_clk
            himm 0x12040080 0x3;    #SPI0_3wire_data
            himm 0x12040088 0x3;    #SPI0_3wire_csn
            himm 0x12010040 0x12;   #sensor clk 54M
            ;;
        bt1120)
            ;;
        *)
            echo "xxxx Invalid sensor type $SNS_TYPE xxxx"
            report_error;;
    esac
}

remove_sns()
{
	rmmod sensor_spi &> /dev/null
	rmmod sensor_i2c &> /dev/null
}

insert_isp()
{
    case $SNS_TYPE in
        imx226 | imx117)
            insmod hi3519_isp.ko update_pos=1 proc_param=30;
            ;;
        *)
            insmod hi3519_isp.ko update_pos=0 proc_param=30;
            ;;
    esac
}

sys_config()
{
	# pinmux configuration
	sh ./pinmux_hi3519.sh -net > /dev/null

	# clock configuration
	sh clkcfg_hi3519.sh > /dev/null

	# system configuration
	sh sysctl_hi3519.sh $b_arg_online  > /dev/null
}

insert_ko()
{
	# sys config
	sys_config;

	cd /usr/lib/modules
	
	# driver load
	insmod mmz.ko mmz=anonymous,0,0x88000000,384M:buf0,0,0xA0000000,128M:buf1,0,0xA8000000,128M:buf2,0,0xB0000000,128M:buf3,0,0xB8000000,128M anony=1 || report_error
	insmod hi_media.ko
	insmod hi3519_base.ko

	insmod hi3519_sys.ko vi_vpss_online=$b_arg_online sensor=$SNS_TYPE

	insmod hi3519_tde.ko
	insmod hi3519_region.ko
	insmod hi3519_vgs.ko

        insert_isp;
	insmod hi3519_fisheye.ko
	insmod hi3519_viu.ko detect_err_frame=10;
	insmod hi3519_vpss.ko 
	insmod hi3519_vou.ko
	#insmod hi3519_vou.ko detectCycle=0 #close dac detect
	#insmod hi3519_vou.ko transparentTransmit=1 #enable transparentTransmit
	insmod hifb.ko video="hifb:vram0_size:1620"     # default pal

	insmod hi3519_rc.ko
	insmod hi3519_venc.ko
	insmod hi3519_chnl.ko
	insmod hi3519_h264e.ko OneStreamBuffer=1
	insmod hi3519_h265e.ko OneStreamBuffer=1
	insmod hi3519_jpege.ko OneStreamBuffer=1
	#insmod hi3519_ive.ko save_power=1;
	#insmod hi3519_fd.ko
	#
	insmod extdrv/sensor_i2c.ko
	insmod extdrv/pwm.ko

	insert_audio

	#insert_sns > /dev/null
	insert_sns

	
	insmod hi_mipi.ko
	echo "==== Your input Sensor type is $SNS_TYPE ===="

}

remove_ko()
{
	remove_audio
	remove_sns

	rmmod sil9024 &> /dev/null
	rmmod pwm

	rmmod hi3519_fd
	rmmod hi3519_ive

	rmmod hi3519_rc
	rmmod hi3519_jpege
	rmmod hi3519_h264e
	rmmod hi3519_h265e
	rmmod hi3519_chnl
	rmmod hi3519_venc

	rmmod hifb
	rmmod hi3519_vou
	rmmod hi3519_vpss
	rmmod hi3519_viu
	rmmod hi_mipi
	rmmod hi3519_fisheye	
	
	rmmod hi3519_vgs
	rmmod hi3519_region
	rmmod hi3519_tde

	rmmod piris

	rmmod hi3519_isp
	rmmod hi3519_sys
	rmmod hi3519_base
	rmmod hi_media
	rmmod mmz
}

sys_restore()
{
	####################################################
	pinmux_hi3519.sh -net > /dev/null
	clkcfg_hi3519.sh > /dev/null

	# system configuration
	sysctl_hi3519.sh $b_arg_online # > /dev/null
	insert_sns;
}

load_usage()
{
	echo "Usage:  ./load3519 [-option] [sensor_name]"
	echo "options:"
	echo "    -i                       insert modules"
	echo "    -r                       remove modules"
	echo "    -a                       remove modules first, then insert modules"
	echo "    -sensor sensor_name      config sensor type [default: mn34220]"
	echo "    -osmem os_mem_size       config os mem size [unit: M, default: 64]"
	echo "    -total_mem_size          config total mem size [unit: M, default: 512]"
	echo "    -offline                 vi/vpss offline"
	echo "    -h                       help information"
	echo -e "Available sensors: mn34220, imx226, imx290"
	echo -e "notes: osmem option can't be used when mmz zone partition is enable\n\n"
	echo -e "for example online:   ./load3519 -a -sensor mn34220 -osmem 64 -total 512\n"
	echo -e "            offline:  ./load3519 -a -sensor mn34220 -osmem 64 -total 512 -offline\n"
}

calc_mmz_info()
{
	mmz_start=`echo "$mem_start $os_mem_size" | 
	awk 'BEGIN { temp = 0; }
	{
		temp = $1/1024/1024 + $2;
	} 
	END { printf("0x%x00000\n", temp); }'`

	mmz_size=`echo "$mem_total $os_mem_size" | 
	awk 'BEGIN { temp = 0; }
	{
		temp = $1 - $2;
	} 
	END { printf("%dM\n", temp); }'`
	echo "mmz_start: $mmz_start, mmz_size: $mmz_size"
	mmz_start=0x88000000
	mmz_size=896M
}


######################parse arg###################################
b_arg_os_mem=0
b_arg_total_mem=0
b_arg_sensor=0
b_arg_insmod=0
b_arg_remove=0
b_arg_online=1
b_arg_restore=0

for arg in $@
do
	if [ $b_arg_total_mem -eq 1 ]; then
		b_arg_total_mem=0;
		mem_total=$arg;
		
		if [ -z $mem_total ]; then
			echo "[error] mem_total is null"
			exit;
		fi
	fi
	
	if [ $b_arg_os_mem -eq 1 ] ; then
		b_arg_os_mem=0;
		os_mem_size=$arg;

		if [ -z $os_mem_size ]; then
			echo "[error] os_mem_size is null"
			exit;
		fi
	fi

	if [ $b_arg_sensor -eq 1 ] ; then
		b_arg_sensor=0
		SNS_TYPE=$arg;
	fi

	case $arg in
		"-i")
			b_arg_insmod=1;
			;;
		"-r")
			b_arg_remove=1;
			;;
		"-a")			
			b_arg_insmod=1;
			b_arg_remove=1;
			;;
		"-h")
			load_usage;
			;;
		"-sensor")
			b_arg_sensor=1;
			;;
		"-osmem")
			b_arg_os_mem=1;
			;;
		"-total")
			b_arg_total_mem=1;
			;;
		"-restore")
			b_arg_restore=1;
			;;
		"-offline")
			b_arg_online=0;
			;;
	esac
done
#######################parse arg end########################

if [ $os_mem_size -ge $mem_total ] ; then
	echo "[err] os_mem[$os_mem_size], over total_mem[$mem_total]"
	exit;
fi

calc_mmz_info;

#######################Action###############################

if [ $# -lt 1 ]; then
    load_usage;
    exit 0;
fi


if [ $b_arg_insmod -eq 1 ]; then
	insert_ko;
fi

if [ $b_arg_restore -eq 1 ]; then	
	sys_restore;
fi
